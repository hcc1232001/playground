{"version":3,"sources":["containers/shakeGame.js","pages/homePage.js","globals/config.js"],"names":["ShakeGame","props","react_default","a","createElement","playerInfo","shakeCount","App","_useState","useState","_useState2","Object","slicedToArray","socket","setSocket","_useState3","_useState4","playersInfo","setPlayersInfo","useEffect","serverUrl","concat","serverPath","serverPort","io","on","console","log","emit","_loop","i","playerIdx","QRCode","toDataURL","window","location","href","width","color","dark","light","margin","then","url","prevPlayersInfo","newPlayerInfo","toConsumableArray","objectSpread","img","length","msg","className","map","joined","key","shakeGame","target","rel","src","alt","__webpack_require__","d","__webpack_exports__"],"mappings":"0LA2CeA,EArCG,SAACC,GAgCjB,OAAOC,EAAAC,EAAAC,cAAA,qBACGH,EAAMI,WAAWC,WADpB,kBCoDMC,UA5EH,SAACN,GAAU,IAAAO,EACOC,mBAAS,MADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACNI,EADMJ,EAAA,GAAAK,EAEiBN,mBAAS,IAF1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEdE,EAFcD,EAAA,GAEDE,EAFCF,EAAA,GAwDrB,OArDAG,oBAAU,WAIR,IAAMC,EAAS,GAAAC,OAAMC,IAAN,KAAAD,OAAoBE,KAC7BV,EAASW,IAAGJ,GAElB,OADAN,EAAUD,GACH,cAGN,IACHM,oBAAU,WACJN,IACFA,EAAOY,GAAG,UAAW,WACnBC,QAAQC,IAAI,eACZd,EAAOe,KAAK,gBAEdf,EAAOY,GAAG,cAAe,SAACR,GACxB,IADwC,IAAAY,EAAA,SAC/BC,GACP,IAAMC,EAAYD,EACZzB,EAAaY,EAAYc,GAC/BC,IAAOC,UAELC,OAAOC,SAASC,KAAO/B,EAAU,SACjC,CACEgC,MAAO,IACPC,MAAO,CACLC,KAAM,YACNC,MAAO,aAETC,OAAQ,IAGXC,KAAK,SAAAC,GACJzB,EAAe,SAAC0B,GACd,IAAMC,EAAalC,OAAAmC,EAAA,EAAAnC,CAAOiC,GAM1B,OALAC,EAAcd,GAAdpB,OAAAoC,EAAA,EAAApC,CAAA,GACKN,EADL,CAEEsC,IAAKT,OAAOC,SAASC,KAAO/B,EAAU,SACtC2C,IAAKL,IAEAE,OAvBJf,EAAI,EAAGA,EAAIb,EAAYgC,OAAQnB,IAAKD,EAApCC,KA6BXjB,EAAOY,GAAG,IAAK,SAACyB,GACdxB,QAAQC,IAAIuB,OAGf,CAACrC,IAEGX,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,iBAEnBlC,EAAYmC,IAAI,SAAA/C,GACf,OAAKA,EAAWgD,OAQPnD,EAAAC,EAAAC,cAAA,OAAKkD,IAAKjD,EAAU,IAAS8C,UAAU,gBAAvC,iBAELjD,EAAAC,EAAAC,cAACmD,EAAD,CAAWlD,WAAYA,KATlBH,EAAAC,EAAAC,cAAA,OAAKkD,IAAKjD,EAAU,IAAS8C,UAAU,gBAE5CjD,EAAAC,EAAAC,cAAA,KAAGgC,KAAM/B,EAAU,IAASmD,OAAO,SAASC,IAAI,uBAC9CvD,EAAAC,EAAAC,cAAA,OAAKsD,IAAKrD,EAAU,IAASsD,IAAG,iGC7E5CC,EAAAC,EAAAC,EAAA,sBAAAxC,IAAAsC,EAAAC,EAAAC,EAAA,sBAAAvC,IAAA,IAAMD,EAAa,yCACbC,EAAa","file":"static/js/2.6b65be73.chunk.js","sourcesContent":["import React from 'react';\r\n// import {useState, useEffect} from 'react';\r\n// import io from 'socket.io-client';\r\n\r\n// import {serverPath, serverPort} from 'globals/config';\r\n\r\nconst ShakeGame = (props) => {\r\n  // const [socket, setSocket] = useState(null);\r\n  // useEffect(() => {\r\n  //   // const serverPath = 'http://localhost';\r\n  //   // get the ip and port from ipc\r\n  //   // const socket = io(window.location.origin);\r\n  //   const serverUrl = `${serverPath}:${serverPort}`;\r\n  //   const socket = io(serverUrl);\r\n  //   setSocket(socket);\r\n  //   return () => {\r\n\r\n  //   }\r\n  // }, []);\r\n  \r\n  // useEffect(()=>{\r\n  //   // bindDeviceMotion({\r\n  //   //   onShake: () => setShakeCounter((prevShakeCounter => {\r\n  //   //       return prevShakeCounter + 1;\r\n  //   //     }))\r\n  //   // })\r\n  //   // change to playing scene/ waiting scene base on user status\r\n  //   socket.on('gameStarted', (msg) => {\r\n  //   })\r\n  // })\r\n  // const init = () => {\r\n  //   useDeviceMotion({\r\n  //     onShake: () => setShakeCounter((prevShakeCounter => {\r\n  //         return prevShakeCounter + 1;\r\n  //       }))\r\n  //   })\r\n  // }\r\n\r\n  return <div>\r\n    Shaked {props.playerInfo.shakeCount} times.\r\n  </div>;\r\n}\r\n\r\nexport default ShakeGame;","import React from 'react';\r\n// import {Link} from 'react-router-dom';\r\nimport {useState, useEffect} from 'react';\r\nimport io from 'socket.io-client';\r\nimport QRCode from 'qrcode';\r\n\r\nimport {serverPath, serverPort} from 'globals/config';\r\n\r\nimport ShakeGame from 'containers/shakeGame';\r\nimport './homePage.css';\r\n\r\n// const serverPath = 'https://socketio-testing.herokuapp.com';\r\n// const serverPort = 443;\r\n\r\nconst App = (props) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [playersInfo, setPlayersInfo] = useState([]);\r\n  useEffect(() => {\r\n    // const serverPath = 'http://localhost';\r\n    // get the ip and port from ipc\r\n    // const socket = io(window.location.origin);\r\n    const serverUrl = `${serverPath}:${serverPort}`;\r\n    const socket = io(serverUrl);\r\n    setSocket(socket);\r\n    return () => {\r\n\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('connect', () => {\r\n        console.log('connected !');\r\n        socket.emit('createRoom');\r\n      });\r\n      socket.on('playersInfo', (playersInfo) => {\r\n        for (let i = 0; i < playersInfo.length; i++) {\r\n          const playerIdx = i;\r\n          const playerInfo = playersInfo[playerIdx];\r\n          QRCode.toDataURL(\r\n            // 'https://hcc1232001.github.io/playground/#/' + playerInfo['playerId'],\r\n            window.location.href + playerInfo['playerId'],\r\n            {\r\n              width: 300,\r\n              color: {\r\n                dark: '#000000FF',\r\n                light: '#FFFFFFFF'\r\n              },\r\n              margin: 0,\r\n            }\r\n          )\r\n          .then(url => {\r\n            setPlayersInfo((prevPlayersInfo) => {\r\n              const newPlayerInfo = [...prevPlayersInfo];\r\n              newPlayerInfo[playerIdx] = {\r\n                ...playerInfo,\r\n                url: window.location.href + playerInfo['playerId'],\r\n                img: url\r\n              };\r\n              return newPlayerInfo;\r\n            })\r\n            // this.qrcodeImage[idx][platform].setAttribute('src', url);\r\n          })\r\n        }\r\n      })\r\n      socket.on('*', (msg) => {\r\n        console.log(msg);\r\n      })\r\n    }\r\n  }, [socket]);\r\n\r\n  return <div className=\"page homePage\">\r\n    {/* display the box of the player recieved from server */}\r\n    {playersInfo.map(playerInfo => {\r\n      if (!playerInfo.joined) {\r\n        return <div key={playerInfo['url']} className=\"player-block\">\r\n          {/* https://mathiasbynens.github.io/rel-noopener/ */}\r\n          <a href={playerInfo['url']} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={playerInfo['img']} alt={`player QRcode`}/>\r\n          </a>\r\n        </div>;\r\n      } else {\r\n        return <div key={playerInfo['url']} className=\"player-block\">\r\n          Player joined!\r\n          <ShakeGame playerInfo={playerInfo} />\r\n        </div>;\r\n      }\r\n    })}\r\n  </div>;\r\n}\r\n\r\nexport default App;","const serverPath = 'https://socketio-testing.herokuapp.com';\r\nconst serverPort = 443;\r\n\r\nexport {\r\n  serverPath,\r\n  serverPort\r\n};"],"sourceRoot":""}