{"version":3,"sources":["pages lazy /^/.*$/ groupOptions: {} namespace object","logo.svg","components/asyncLoadingComponent.js","globals/routes.js","App.js","serviceWorker.js","index.js"],"names":["map","./homePage","./homePage.css","./homePage.js","./homePage/App","./homePage/App.js","./joinGame","./joinGame.js","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","p","asyncLoadingPage","pageId","funcToImportPage","Loadable","loader","loading","props","isLoading","react_default","a","createElement","className","timedOut","error","routes","homePage","joinGame","getRenderPropForRoute","AppComponent","match","App","react_router_dom","react_router","path","render","to","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAA,IAAAA,EAAA,CACAC,aAAA,CACA,GACA,EACA,EACA,EACA,GAEAC,iBAAA,CACA,GACA,EACA,GAEAC,gBAAA,CACA,GACA,EACA,EACA,EACA,GAEAC,iBAAA,CACA,GACA,EACA,EACA,GAEAC,oBAAA,CACA,GACA,EACA,EACA,GAEAC,aAAA,CACA,GACA,EACA,EACA,GAEAC,gBAAA,CACA,GACA,EACA,EACA,IAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAX,EAAAS,GACA,OAAAG,QAAAC,UAAAC,KAAA,WACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAP,EAAA,KAEA,MADAM,EAAAE,KAAA,mBACAF,IAIA,IAAAG,EAAAlB,EAAAS,GAAAU,EAAAD,EAAA,GACA,OAAAN,QAAAQ,IAAAF,EAAAG,MAAA,GAAArB,IAAAU,EAAAK,IAAAD,KAAA,WACA,OAAAJ,EAAAY,EAAAH,EAAAD,EAAA,MAGAV,EAAAe,KAAA,WACA,OAAAC,OAAAD,KAAAvB,IAEAQ,EAAAW,GAAA,GACAM,EAAAC,QAAAlB,sBC/DAiB,EAAAC,QAAiBhB,EAAAiB,EAAuB,2KCoBzB,SAASC,EAAiBC,GACvC,OAlB4BC,EAkBA,kBAAKpB,EAAA,GAAAA,CAAO,KAAWmB,IAjB5CE,IAAS,CACdC,OAAQF,EACRG,QAAS,SAACC,GACR,OAAIA,EAAMC,UACDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,cACCL,EAAMM,SACPJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,0BACEL,EAAMO,MACRL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,4CAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,oBAXf,IAA8BT,ECH9B,IAKeY,EALA,CACbC,SAAU,IACVC,SAAU,YCKNC,eAAwB,SAAChB,GAC7B,IAAMiB,EAAelB,EAAiBC,GACtC,OAAO,SAACkB,GAAY,OAAQX,EAAAC,EAAAC,cAACQ,EAAD,CAAcC,MAAOA,OAepCC,EAZH,WACV,OACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAMT,EAAOE,SAAUQ,OAAQP,EAAsB,cAC5DT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAMT,EAAOC,SAAUS,OAAQP,EAAsB,cAC5DT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUG,GAAIX,EAAOC,cCNTW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCZNW,IAASN,OAAOhB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.d995161a.chunk.js","sourcesContent":["var map = {\n\t\"./homePage\": [\n\t\t20,\n\t\t9,\n\t\t0,\n\t\t1,\n\t\t2\n\t],\n\t\"./homePage.css\": [\n\t\t36,\n\t\t7,\n\t\t8\n\t],\n\t\"./homePage.js\": [\n\t\t20,\n\t\t9,\n\t\t0,\n\t\t1,\n\t\t2\n\t],\n\t\"./homePage/App\": [\n\t\t19,\n\t\t9,\n\t\t0,\n\t\t3\n\t],\n\t\"./homePage/App.js\": [\n\t\t19,\n\t\t9,\n\t\t0,\n\t\t3\n\t],\n\t\"./joinGame\": [\n\t\t21,\n\t\t9,\n\t\t0,\n\t\t4\n\t],\n\t\"./joinGame.js\": [\n\t\t21,\n\t\t9,\n\t\t0,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 30;\nmodule.exports = webpackAsyncContext;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\n\r\nfunction asyncLoadingFunction(funcToImportPage) {\r\n  return Loadable({\r\n    loader: funcToImportPage,\r\n    loading: (props) => { \r\n      if (props.isLoading) {\r\n        return <div className=\"loading-loading\">Loading...</div>;\r\n      }else if (props.timedOut) {\r\n        return <div className=\"loading-timeout\">Timeout. Please retry.</div>\r\n      } else if (props.error) {\r\n        return <div className=\"loading-error\">Sorry, there was a problem when loading.</div>;\r\n      } else {\r\n        return <div className=\"loading-unknown\">Unknown Error</div>;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport default function asyncLoadingPage(pageId) {\r\n  return asyncLoadingFunction(()=> import('pages/' + pageId));\r\n}\r\n","const routes = {\r\n  homePage: '/',\r\n  joinGame: '/:userId',\r\n};\r\n\r\nexport default routes;","import React from 'react';\nimport {HashRouter, Switch, Route, Redirect} from 'react-router-dom';\nimport asyncLoadingPage from 'components/asyncLoadingComponent.js';\nimport routes from 'globals/routes';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst getRenderPropForRoute = (pageId) => {\n  const AppComponent = asyncLoadingPage(pageId);\n  return (match) => { return (<AppComponent match={match} />) };\n}\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path={routes.joinGame} render={getRenderPropForRoute('joinGame')} />\n        <Route path={routes.homePage} render={getRenderPropForRoute('homePage')} />\n        <Redirect to={routes.homePage} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}