{"version":3,"sources":["components/fbxModelsLoader.js","pages/createGame.js","media/models/190717_frying pan animationA(2).fbx"],"names":["FBXLoader","require","fbxModelsLoader","modelsUrlArray","loader","mixer","modelLoadingArray","forEach","modelUrl","idx","push","Promise","resolve","reject","setTimeout","load","object","action","THREE","clipAction","animations","loop","clampWhenFinished","traverse","child","isMesh","castShadow","receiveShadow","item","console","log","loaded","total","err","all","CreateGame","props","_useState","useState","_useState2","Object","slicedToArray","loadedModels","setLoadedModels","fbxModels","useEffect","loadModels","then","models","react_default","a","createElement","className","length","module","exports","__webpack_require__","p"],"mappings":"oIAEMA,EAAYC,EAAQ,IAgDXC,EA9CS,SAACC,GACvB,IAAMC,EAAS,IAAIJ,EACfK,EAAQ,KACRC,EAAoB,GAuCxB,OAtCAH,EAAeI,QAAQ,SAACC,EAAUC,GAChCH,EAAkBI,KAChB,IAAIC,QAAQ,SAACC,EAASC,GACpBC,WAAW,WACTV,EAAOW,KAAKP,EAAU,SAACQ,GAErB,IAAMC,GADNZ,EAAQ,IAAIa,iBAAsBF,IACbG,WAAYH,EAAOI,WAAY,IACpDH,EAAOI,KAAOH,WACdD,EAAOK,mBAAoB,EAE3BN,EAAOO,SAAS,SAAAC,GACVA,EAAMC,SACRD,EAAME,YAAa,EACnBF,EAAMG,eAAgB,KAG1Bf,EAAQ,CACNI,OAAQA,EACRX,MAAOA,EACPY,OAAQA,KAGT,SAACW,GAEFC,QAAQC,IAAIF,EAAKG,OAASH,EAAKI,MAAQ,IAAM,MAC5C,SAACC,GACFJ,QAAQC,IAAIG,GACZpB,EAAOoB,MAEF,IAANxB,QASFE,QAAQuB,IAAI5B,ICMN6B,UA/CI,SAACC,GAAU,IAAAC,EAqBYC,mBAAS,IArBrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAqBrBK,EArBqBH,EAAA,GAqBPI,EArBOJ,EAAA,GAsBtBK,EAAY,CAChB3C,EAAQ,IACRA,EAAQ,IACRA,EAAQ,KAEV4C,oBAAU,WAGR,OADAC,IACO,cAIN,IACH,IAAMA,EAAa,WAEjB5C,EAAgB0C,GAAWG,KAAK,SAAAC,GAC9BnB,QAAQC,IAAIkB,GACZL,EAAgBK,MAGpB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,wCAEWV,EAAaW,6BCjDjCC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/7.a454068e.chunk.js","sourcesContent":["// import React from 'react';\r\nimport * as THREE from 'three';\r\nconst FBXLoader = require('three-fbxloader-offical');\r\n\r\nconst fbxModelsLoader = (modelsUrlArray) => {\r\n  const loader = new FBXLoader();\r\n  let mixer = null;\r\n  let modelLoadingArray = [];\r\n  modelsUrlArray.forEach((modelUrl, idx) => {\r\n    modelLoadingArray.push(\r\n      new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          loader.load(modelUrl, (object) => {\r\n            mixer = new THREE.AnimationMixer( object );\r\n            const action = mixer.clipAction( object.animations[ 0 ] );\r\n            action.loop = THREE.LoopOnce;\r\n            action.clampWhenFinished = true;\r\n            // action.play();\r\n            object.traverse(child => {\r\n              if (child.isMesh) {\r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n              }\r\n            });\r\n            resolve({\r\n              object: object,\r\n              mixer: mixer,\r\n              action: action,\r\n            });\r\n\r\n          }, (item) => {\r\n            // console.log( item, loaded, total );\r\n            console.log(item.loaded / item.total * 100 + '%');\r\n          }, (err) => {\r\n            console.log(err);\r\n            reject(err);\r\n          });\r\n        }, idx * 1000)\r\n        // resolve(\"foo\");\r\n      })\r\n    )\r\n  })\r\n  // const values = Promise.all(modelLoadingArray).then(values => { \r\n  //   return values;\r\n  // })\r\n  // return values;\r\n  return Promise.all(modelLoadingArray);\r\n  // return [];\r\n}\r\n\r\nexport default fbxModelsLoader;","import React from 'react';\r\nimport {useEffect, useState, useCallback} from 'react';\r\n\r\nimport fbxModelsLoader from 'components/fbxModelsLoader';\r\n\r\nconst CreateGame = (props) => {\r\n  /**\r\n   * createGame\r\n   *   - load kitchen and 3 hobs models\r\n   *   - connect to server and get the N-players uuid\r\n   *   - generate and display the qrcode base on the players uuid\r\n   *   - hidden buttons? (immediate start / restart / end game)\r\n   *   - wait the player scan the qrcode\r\n   *     - player joined (1 - N), start count down\r\n   * \r\n   * startGame\r\n   *   - user shake and the correspond hob play the animation\r\n   *     - if no one finish the shake, the total game time is 20secs\r\n   *     - if a user finish the shake, other players count down 5secs\r\n   *   - for 20% progress, add a popup\r\n   * \r\n   * endGame\r\n   *   - show the result\r\n   *   - auto restart after ? secs (or staff click?)\r\n   * \r\n   * */\r\n  const [loadedModels, setLoadedModels] = useState([]);\r\n  const fbxModels = [\r\n    require('media/models/190717_frying pan animationA(2).fbx'),\r\n    require('media/models/190717_frying pan animationA(2).fbx'),\r\n    require('media/models/190717_frying pan animationA(2).fbx'),\r\n  ];\r\n  useEffect(() => {\r\n    // page load\r\n    loadModels();\r\n    return () => {\r\n      // page unload\r\n\r\n    }\r\n  }, []);\r\n  const loadModels = () => {\r\n    // load the models of the kitchen and the hobs\r\n    fbxModelsLoader(fbxModels).then(models => {\r\n      console.log(models);\r\n      setLoadedModels(models);\r\n    });\r\n  }\r\n  return <div className=\"page createGame\">\r\n    content of createGame\r\n    models loaded: {loadedModels.length}\r\n  </div>;\r\n}\r\nexport default CreateGame;","module.exports = __webpack_public_path__ + \"static/media/190717_frying pan animationA(2).c4bb87c7.fbx\";"],"sourceRoot":""}