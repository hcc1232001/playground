{"version":3,"sources":["containers/shakeGame.js","pages/homePage.js","components/useDeviceMotion.js"],"names":["ShakeGame","props","useEffect","react_default","a","createElement","playerInfo","shakeCount","App","_useState","useState","_useState2","Object","slicedToArray","socket","setSocket","_useState3","_useState4","playersInfo","setPlayersInfo","serverUrl","concat","io","on","console","log","emit","_loop","i","playerIdx","QRCode","toDataURL","window","location","href","width","color","dark","light","then","url","prevPlayersInfo","newPlayerInfo","toConsumableArray","objectSpread","img","length","msg","className","map","joined","key","shakeGame","target","src","UseDeviceMotion","D_Documents_Projects_React_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","threshold","setThreshold","lastAccVec3","setLastAccVec3","_useState5","_useState6","moveCounter","setMoveCounter","_useState7","_useState8","addEventListener","onMotion","removeEventListener","onShake","event","alpha","beta","gamma","deltaX","Math","abs","deltaY","deltaZ","prevMoveCounter","max","react__WEBPACK_IMPORTED_MODULE_1___default"],"mappings":"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","file":"static/js/2.79916b47.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport UseDeviceMotion from 'components/useDeviceMotion';\r\n\r\nconst ShakeGame = (props) => {\r\n  useEffect(()=>{\r\n    // bindDeviceMotion({\r\n    //   onShake: () => setShakeCounter((prevShakeCounter => {\r\n    //       return prevShakeCounter + 1;\r\n    //     }))\r\n    // })\r\n  })\r\n  // const init = () => {\r\n  //   useDeviceMotion({\r\n  //     onShake: () => setShakeCounter((prevShakeCounter => {\r\n  //         return prevShakeCounter + 1;\r\n  //       }))\r\n  //   })\r\n  // }\r\n\r\n  return <div>\r\n    Shaked {props.playerInfo.shakeCount} times.\r\n  </div>;\r\n}\r\n\r\nexport default ShakeGame;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {useState, useEffect} from 'react';\r\nimport io from 'socket.io-client';\r\nimport QRCode from 'qrcode';\r\n\r\nimport ShakeGame from 'containers/shakeGame';\r\nimport './homePage.css';\r\n\r\nconst serverPath = 'https://socketio-testing.herokuapp.com';\r\nconst serverPort = 443;\r\n\r\nconst App = (props) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [playersInfo, setPlayersInfo] = useState([]);\r\n  useEffect(() => {\r\n    // const serverPath = 'http://localhost';\r\n    // get the ip and port from ipc\r\n    // const socket = io(window.location.origin);\r\n    const serverUrl = `${serverPath}:${serverPort}`;\r\n    const socket = io(serverUrl);\r\n    setSocket(socket);\r\n    return () => {\r\n\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('connect', () => {\r\n        console.log('connected !');\r\n        socket.emit('createRoom');\r\n      });\r\n      socket.on('playersInfo', (playersInfo) => {\r\n        // setPlayerCount(count);\r\n        console.log(playersInfo);\r\n        // const playersInfo = [];\r\n        for (let i = 0; i < playersInfo.length; i++) {\r\n          const playerIdx = i;\r\n          const playerInfo = playersInfo[playerIdx];\r\n          QRCode.toDataURL(\r\n            // 'https://hcc1232001.github.io/playground/#/' + playerInfo['playerId'],\r\n            window.location.href + playerInfo['playerId'],\r\n            {\r\n              width: 300,\r\n              color: {\r\n                dark: '#000000FF',\r\n                light: '#FFFFFFFF'\r\n              }\r\n            }\r\n          )\r\n          .then(url => {\r\n            setPlayersInfo((prevPlayersInfo) => {\r\n              const newPlayerInfo = [...prevPlayersInfo];\r\n              newPlayerInfo[playerIdx] = {\r\n                ...playerInfo,\r\n                url: 'http://10.0.1.111:3001/#/' + playerInfo['playerId'],\r\n                img: url\r\n              };\r\n              return newPlayerInfo;\r\n            })\r\n            // this.qrcodeImage[idx][platform].setAttribute('src', url);\r\n          })\r\n        }\r\n      })\r\n      socket.on('*', (msg) => {\r\n        console.log(msg);\r\n      })\r\n    }\r\n  }, [socket]);\r\n\r\n  return <div className=\"page homePage\">\r\n    {/* display the box of the player recieved from server */}\r\n    {playersInfo.map(playerInfo => {\r\n      if (!playerInfo.joined) {\r\n        return <div key={playerInfo['url']} className=\"player-block\">\r\n          <a href={playerInfo['url']} target=\"_blank\">\r\n            <img src={playerInfo['img']} />\r\n          </a>\r\n        </div>;\r\n      } else {\r\n        return <div key={playerInfo['url']} className=\"player-block\">\r\n          Player joined!\r\n          <ShakeGame playerInfo={playerInfo} />\r\n        </div>;\r\n      }\r\n    })}\r\n  </div>;\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\n\r\n\r\n// https://www.raymondcamden.com/2017/04/25/using-device-motion-on-the-web\r\nconst UseDeviceMotion = (props) => {\r\n  const [threshold, setThreshold] = useState(45);\r\n  const [lastAccVec3, setLastAccVec3] = useState([null, null, null]);\r\n  const [moveCounter, setMoveCounter] = useState(0);\r\n  const [shakeCounter, setShakeCounter] = useState(0);\r\n  useEffect(() => {\r\n    if (props.threshold) {\r\n      setThreshold(props.threshold);\r\n    }\r\n    return () => {\r\n\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('deviceorientation', onMotion, false);\r\n    // console.log('addEventListener deviceorientation');\r\n    return () => {\r\n      window.removeEventListener('deviceorientation', onMotion, false);\r\n      // console.log('removeEventListener deviceorientation');\r\n    }\r\n  }, [threshold, lastAccVec3])\r\n\r\n  useEffect(() => {\r\n    if(moveCounter > 2) {\r\n      console.log('SHAKE!!!');\r\n      // setShakeCounter((prevShakeCounter => {\r\n      //   return prevShakeCounter + 1;\r\n      // }));\r\n      if (props.onShake && typeof(props.onShake) === 'function') {\r\n        props.onShake();\r\n      }\r\n\t\t\tsetMoveCounter(0);\r\n\t\t}\r\n  }, [moveCounter])\r\n\r\n  const onMotion = (event) => {\r\n    // event.alpha\r\n    // event.beta\r\n    // event.gamma\r\n    const {alpha, beta, gamma} = event;\r\n    //console.log('motion', acc);\r\n    // if (lastAccVec3[0] === null) {\r\n    //   setLastAccVec3([alpha, beta, gamma]);\r\n    //   return;\r\n    // }\r\n    // dunno why there exist some wrong result\r\n    //  - alpha, bata, gamma all zero randomly\r\n    if (!(alpha && beta && gamma)) { return; }\r\n    let deltaX = Math.abs(alpha - lastAccVec3[0]);\r\n    let deltaY = Math.abs(beta - lastAccVec3[1]);\r\n    let deltaZ = Math.abs(gamma - lastAccVec3[2]);\r\n  \r\n    if(deltaX + deltaY + deltaZ > threshold) {\r\n      setMoveCounter((prevMoveCounter) => {\r\n        return prevMoveCounter + 1;\r\n      })\r\n    } else {\r\n      setMoveCounter((prevMoveCounter) => {\r\n        return Math.max(0, prevMoveCounter - 1);\r\n      })\r\n    }\r\n    setLastAccVec3([alpha, beta, gamma]);\r\n  }\r\n\r\n  // return <div>\r\n  //   {lastAccVec3.map(v => v + ', ')}\r\n  // </div>;\r\n\r\n  // return shakeCounter;\r\n  return <div />;\r\n}\r\n\r\nexport default UseDeviceMotion;"],"sourceRoot":""}