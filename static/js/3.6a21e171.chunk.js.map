{"version":3,"sources":["pages/homePage/App.js","components/useDeviceMotion.js"],"names":["App","props","_useState","useState","_useState2","Object","D_Documents_Projects_React_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","socket","setSocket","_useState3","_useState4","playerCount","setPlayerCount","_useState5","_useState6","isShake","setIsShake","shakeDisplayTimer","useEffect","serverUrl","concat","io","on","console","log","emit","count","msg","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","components_useDeviceMotion__WEBPACK_IMPORTED_MODULE_3__","onShake","clearTimeout","setTimeout","onClick","UseDeviceMotion","threshold","setThreshold","lastAccVec3","setLastAccVec3","moveCounter","setMoveCounter","_useState7","_useState8","window","addEventListener","onMotion","removeEventListener","event","alpha","beta","gamma","deltaX","Math","abs","deltaY","deltaZ","prevMoveCounter","max"],"mappings":"qJA2DeA,UAtDH,SAACC,GAAU,IAAAC,EACOC,mBAAS,MADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACNI,EADMJ,EAAA,GAAAK,EAEiBN,mBAAS,GAF1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEdE,EAFcD,EAAA,GAEDE,EAFCF,EAAA,GAAAG,EAGSV,oBAAS,GAHlBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGdE,EAHcD,EAAA,GAGLE,EAHKF,EAAA,GAIjBG,EAAoB,KACxBC,oBAAU,WAGR,IAGMC,EAAS,GAAAC,OAHI,0CAIbb,EAASc,IAAGF,GAElB,OADAX,EAAUD,GACH,cAGN,IACHW,oBAAU,WACJX,IACFA,EAAOe,GAAG,UAAW,WACnBC,QAAQC,IAAI,eACZjB,EAAOkB,KAAK,gBAEdlB,EAAOe,GAAG,oBAAqB,SAACI,GAC9Bd,EAAec,KAEjBnB,EAAOe,GAAG,IAAK,SAACK,GACdJ,QAAQC,IAAIG,OAGf,CAACpB,IAUJ,OAAOqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACpBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,QAVH,WACVhB,GACFiB,aAAajB,GAEfD,GAAW,GACXC,EAAoBkB,WAAW,WAC7BnB,GAAW,IACV,QAEE,qBAGLY,EAAAC,EAAAC,cAAA,WAAMf,EAAS,QAAS,WACxBa,EAAAC,EAAAC,cAAA,OAAKM,QAAS,WACZ7B,EAAOkB,KAAK,OAAQ,WADtB,gBAEiBd,GACjBiB,EAAAC,EAAAC,cAAA,2ECyBWO,IAzES,SAACpC,GAAU,IAAAC,EACCC,mBAAS,IADVC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1BoC,EAD0BlC,EAAA,GACfmC,EADenC,EAAA,GAAAK,EAEKN,mBAAS,CAAC,KAAM,KAAM,OAF3BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE1B+B,EAF0B9B,EAAA,GAEb+B,EAFa/B,EAAA,GAAAG,EAGKV,mBAAS,GAHdW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG1B6B,EAH0B5B,EAAA,GAGb6B,EAHa7B,EAAA,GAAA8B,EAIOzC,mBAAS,GAJhB0C,EAAAxC,OAAAC,EAAA,EAAAD,CAAAuC,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAKjC3B,oBAAU,WAIR,OAHIjB,EAAMqC,WACRC,EAAatC,EAAMqC,WAEd,cAGN,IAEHpB,oBAAU,WAGR,OAFA4B,OAAOC,iBAAiB,oBAAqBC,GAAU,GAEhD,WACLF,OAAOG,oBAAoB,oBAAqBD,GAAU,KAG3D,CAACV,EAAWE,IAEftB,oBAAU,WACLwB,EAAc,IACfnB,QAAQC,IAAI,YAIRvB,EAAMgC,SAAqC,oBAAnBhC,EAAMgC,SAChChC,EAAMgC,UAEXU,EAAe,KAEb,CAACD,IAEJ,IAAMM,EAAW,SAACE,GAAU,IAInBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MAQpB,GAAMF,GAASC,GAAQC,EAAvB,CACA,IAAIC,EAASC,KAAKC,IAAIL,EAAQX,EAAY,IACtCiB,EAASF,KAAKC,IAAIJ,EAAOZ,EAAY,IACrCkB,EAASH,KAAKC,IAAIH,EAAQb,EAAY,IAGxCG,EADCW,EAASG,EAASC,EAASpB,EACb,SAACqB,GACd,OAAOA,EAAkB,GAGZ,SAACA,GACd,OAAOJ,KAAKK,IAAI,EAAGD,EAAkB,KAGzClB,EAAe,CAACU,EAAOC,EAAMC,MAQ/B,OAAOzB,EAAAC,EAAAC,cAAA","file":"static/js/3.6a21e171.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport io from 'socket.io-client';\r\nimport UseDeviceMotion from 'components/useDeviceMotion';\r\n\r\nconst App = (props) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [playerCount, setPlayerCount] = useState(0);\r\n  const [isShake, setIsShake] = useState(false);\r\n  let shakeDisplayTimer = null;\r\n  useEffect(() => {\r\n    // const serverPort = 8688;\r\n    // const serverPath = 'http://localhost';\r\n    const serverPath = 'https://socketio-testing.herokuapp.com';\r\n    // get the ip and port from ipc\r\n    // const socket = io(window.location.origin);\r\n    const serverUrl = `${serverPath}`;//`:${serverPort}`;\r\n    const socket = io(serverUrl);\r\n    setSocket(socket);\r\n    return () => {\r\n\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on('connect', () => {\r\n        console.log('connected !');\r\n        socket.emit('createRoom');\r\n      })\r\n      socket.on('updatePlayerCount', (count) => {\r\n        setPlayerCount(count);\r\n      })\r\n      socket.on('*', (msg) => {\r\n        console.log(msg);\r\n      })\r\n    }\r\n  }, [socket])\r\n  const onShake = () => {\r\n    if (shakeDisplayTimer) {\r\n      clearTimeout(shakeDisplayTimer);\r\n    }\r\n    setIsShake(true);\r\n    shakeDisplayTimer = setTimeout(() => {\r\n      setIsShake(false);\r\n    }, 1000);\r\n  }\r\n  return <div className=\"page homePage\">\r\n    <UseDeviceMotion onShake={onShake} />\r\n    This is Home Page. \r\n    <div>{isShake? 'shake': 'nothing'}</div>\r\n    <div onClick={() => {\r\n      socket.emit('test', 'hello');\r\n    }}>playerCount: {playerCount}</div>\r\n    <pre>\r\n    {/* JSON.stringify(props, null, '  ') */}\r\n    </pre>\r\n  </div>\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\n\r\n\r\n// https://www.raymondcamden.com/2017/04/25/using-device-motion-on-the-web\r\nconst UseDeviceMotion = (props) => {\r\n  const [threshold, setThreshold] = useState(45);\r\n  const [lastAccVec3, setLastAccVec3] = useState([null, null, null]);\r\n  const [moveCounter, setMoveCounter] = useState(0);\r\n  const [shakeCounter, setShakeCounter] = useState(0);\r\n  useEffect(() => {\r\n    if (props.threshold) {\r\n      setThreshold(props.threshold);\r\n    }\r\n    return () => {\r\n\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('deviceorientation', onMotion, false);\r\n    // console.log('addEventListener deviceorientation');\r\n    return () => {\r\n      window.removeEventListener('deviceorientation', onMotion, false);\r\n      // console.log('removeEventListener deviceorientation');\r\n    }\r\n  }, [threshold, lastAccVec3])\r\n\r\n  useEffect(() => {\r\n    if(moveCounter > 2) {\r\n      console.log('SHAKE!!!');\r\n      // setShakeCounter((prevShakeCounter => {\r\n      //   return prevShakeCounter + 1;\r\n      // }));\r\n      if (props.onShake && typeof(props.onShake) === 'function') {\r\n        props.onShake();\r\n      }\r\n\t\t\tsetMoveCounter(0);\r\n\t\t}\r\n  }, [moveCounter])\r\n\r\n  const onMotion = (event) => {\r\n    // event.alpha\r\n    // event.beta\r\n    // event.gamma\r\n    const {alpha, beta, gamma} = event;\r\n    //console.log('motion', acc);\r\n    // if (lastAccVec3[0] === null) {\r\n    //   setLastAccVec3([alpha, beta, gamma]);\r\n    //   return;\r\n    // }\r\n    // dunno why there exist some wrong result\r\n    //  - alpha, bata, gamma all zero randomly\r\n    if (!(alpha && beta && gamma)) { return; }\r\n    let deltaX = Math.abs(alpha - lastAccVec3[0]);\r\n    let deltaY = Math.abs(beta - lastAccVec3[1]);\r\n    let deltaZ = Math.abs(gamma - lastAccVec3[2]);\r\n  \r\n    if(deltaX + deltaY + deltaZ > threshold) {\r\n      setMoveCounter((prevMoveCounter) => {\r\n        return prevMoveCounter + 1;\r\n      })\r\n    } else {\r\n      setMoveCounter((prevMoveCounter) => {\r\n        return Math.max(0, prevMoveCounter - 1);\r\n      })\r\n    }\r\n    setLastAccVec3([alpha, beta, gamma]);\r\n  }\r\n\r\n  // return <div>\r\n  //   {lastAccVec3.map(v => v + ', ')}\r\n  // </div>;\r\n\r\n  // return shakeCounter;\r\n  return <div />;\r\n}\r\n\r\nexport default UseDeviceMotion;"],"sourceRoot":""}